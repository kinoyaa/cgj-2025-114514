
#  <auto-generated>
#    This code was generated by a tool.
#    Changes to this file may cause incorrect behavior and will be lost if
#    the code is regenerated.
#  </auto-generated>

@tool
class_name Schema
extends RefCounted


enum CardQuality
{
	## 普通
	common = 0,
	## 稀有
	rare = 1,
	## 史诗
	epic = 2,
	## 传奇
	legendary = 3,
}


enum CardType
{
	## 食物卡
	food_card = 0,
	## 工具卡
	tool_card = 1,
	## 技能卡
	skill_card = 2,
	## 杂项卡
	misc_card = 3,
}


enum CardUseTarget
{
	## 对敌
	enemy = 0,
	## 对我
	friendly = 1,
	## 对牌
	card = 2,
	## 直接使用
	direct_use = 3,
}


enum EntityElement
{
	## 体质
	constitution = 0,
	## 魔法体质
	magic_constitution = 1,
	## 金
	metal = 2,
	## 木
	wood = 3,
	## 水
	water = 4,
	## 火
	fire = 5,
	## 风
	wind = 6,
	## 电
	lightning = 7,
	## 人造物
	artificial = 8,
}


enum EntityFaction
{
	## 敌人
	enemy = 0,
	## 友好的
	friendly = 1,
	## 中立的
	neutral = 2,
}


enum ResType
{
	## 卡牌主图
	card_texture = 0,
	## npc立绘
	character = 1,
	## 物品图标
	item_icon = 2,
	## 技能图标
	skill_icon = 3,
	## buff图标
	buff_icon = 4,
	## 背景音乐
	bgm = 5,
	## 背景音效
	bgs = 6,
	## 音效
	se = 7,
}


class BuffConfData:
	## buff名
	var name: String
	## 别名
	var alias: String
	## 是否可叠加
	var overlay: bool
	## 最大叠加层数
	var overlay_layer: int
	## 每回合层数变化
	var layer_variation: String
	## 前置条件
	var precondation: Array[String]
	## 效果
	var effect: Dictionary
	## 描述
	var description: String

	func _init(_json_) -> void:
		self.name = _json_["name"]
		self.alias = _json_["alias"]
		self.overlay = _json_["overlay"]
		self.overlay_layer = _json_["overlay_layer"]
		self.layer_variation = _json_["layer_variation"]
		self.precondation = []
		for _ele in _json_["precondation"]: var _e: String; _e = _ele; self.precondation.append(_e)
		self.effect = {}
		for _e in _json_["effect"]: var _k: String; _k = _e[0]; var _v: String; _v = _e[1]; self.effect[_k] = _v
		self.description = _json_["description"]


class CardConfData:
	## 序号
	var id: String
	## 卡牌名
	var name: String
	## 别名
	var alias: String
	## 卡牌类型
	var type: int
	## 卡牌品质
	var quality: int
	## 匹配标签(内禀属性)
	var tags: Array[String]
	## 使用目标
	var use_target: Array[int]
	## 花费行动点
	var cost: int
	## (food_card)是否是原料
	var food_card: FoodCard
	## (tool_card)插槽(匹配tag)
	var tool_card: ToolCard
	## 执行函数(基于角色)
	var run_func: Array[String]
	## 执行脚本
	var run_script: String
	## 描述
	var description: String

	func _init(_json_) -> void:
		self.id = _json_["id"]
		self.name = _json_["name"]
		self.alias = _json_["alias"]
		self.type = _json_["type"]
		self.quality = _json_["quality"]
		self.tags = []
		for _ele in _json_["tags"]: var _e: String; _e = _ele; self.tags.append(_e)
		self.use_target = []
		for _ele in _json_["use_target"]: var _e: int; _e = _ele; self.use_target.append(_e)
		self.cost = _json_["cost"]
		if _json_.get('food_card') != null: self.food_card = FoodCard.new(_json_["food_card"])
		if _json_.get('tool_card') != null: self.tool_card = ToolCard.new(_json_["tool_card"])
		self.run_func = []
		for _ele in _json_["run_func"]: var _e: String; _e = _ele; self.run_func.append(_e)
		self.run_script = _json_["run_script"]
		self.description = _json_["description"]


class CollectionConfData:
	## 藏品名
	var name: String
	## 别名
	var alias: String

	func _init(_json_) -> void:
		self.name = _json_["name"]
		self.alias = _json_["alias"]


class EffectConfData:
	## 效果名称
	var name: String
	## 体质
	var constitution: float
	## 魔法体质
	var magic_constitution: float
	## 金
	var metal: float
	## 木
	var wood: float
	## 水
	var water: float
	## 火
	var fire: float
	## 风
	var wind: float
	## 电
	var lightning: float
	## 人造物
	var artificial: float
	## 描述
	var description: String

	func _init(_json_) -> void:
		self.name = _json_["name"]
		self.constitution = _json_["constitution"]
		self.magic_constitution = _json_["magic_constitution"]
		self.metal = _json_["metal"]
		self.wood = _json_["wood"]
		self.water = _json_["water"]
		self.fire = _json_["fire"]
		self.wind = _json_["wind"]
		self.lightning = _json_["lightning"]
		self.artificial = _json_["artificial"]
		self.description = _json_["description"]


class EntityConfData:
	## 实体名
	var name: String
	## 别名
	var alias: String
	## 实体阵营
	var faction: int
	## 元素类型
	var element: int
	## 生命值集合
	var hp_set: Dictionary
	## 抗性集合
	var resistance_set: Dictionary
	## 警惕值
	var vp: int
	## 描述
	var description: String

	func _init(_json_) -> void:
		self.name = _json_["name"]
		self.alias = _json_["alias"]
		self.faction = _json_["faction"]
		self.element = _json_["element"]
		self.hp_set = {}
		for _e in _json_["hp_set"]: var _k: String; _k = _e[0]; var _v: int; _v = _e[1]; self.hp_set[_k] = _v
		self.resistance_set = {}
		for _e in _json_["resistance_set"]: var _k: String; _k = _e[0]; var _v: int; _v = _e[1]; self.resistance_set[_k] = _v
		self.vp = _json_["vp"]
		self.description = _json_["description"]


class FoodCard:
	## 是否是原料
	var is_raw_material: bool
	## 口味标签
	var taste_tags: Array[String]
	## 可以在什么厨具中被制作
	var utils_tags: Array[String]
	## 合成配方（如果有的话）
	var recipe: Array[String]
	## 触发buff
	var self_trigger_buff: Dictionary
	## 敌方触发buff
	var enemy_trigger_buff: Dictionary

	func _init(_json_) -> void:
		self.is_raw_material = _json_["is_raw_material"]
		self.taste_tags = []
		for _ele in _json_["taste_tags"]: var _e: String; _e = _ele; self.taste_tags.append(_e)
		self.utils_tags = []
		for _ele in _json_["utils_tags"]: var _e: String; _e = _ele; self.utils_tags.append(_e)
		self.recipe = []
		for _ele in _json_["recipe"]: var _e: String; _e = _ele; self.recipe.append(_e)
		self.self_trigger_buff = {}
		for _e in _json_["self_trigger_buff"]: var _k: String; _k = _e[0]; var _v: int; _v = _e[1]; self.self_trigger_buff[_k] = _v
		self.enemy_trigger_buff = {}
		for _e in _json_["enemy_trigger_buff"]: var _k: String; _k = _e[0]; var _v: int; _v = _e[1]; self.enemy_trigger_buff[_k] = _v


class ResConfData:
	## 资源名
	var name: String
	## 后缀名
	var suffix: String
	## 类型
	var type: int
	## 偏移量
	var offset: Array[int]

	func _init(_json_) -> void:
		self.name = _json_["name"]
		self.suffix = _json_["suffix"]
		self.type = _json_["type"]
		self.offset = []
		for _ele in _json_["offset"]: var _e: int; _e = _ele; self.offset.append(_e)


class ToolCard:
	## 插槽（二元数组，[必选数量,可选数量]）
	var slot: Array[int]
	## 匹配燃料(子项白名单匹配tag)
	var fuel: Array[String]

	func _init(_json_) -> void:
		self.slot = []
		for _ele in _json_["slot"]: var _e: int; _e = _ele; self.slot.append(_e)
		self.fuel = []
		for _ele in _json_["fuel"]: var _e: String; _e = _ele; self.fuel.append(_e)


class CardConf:
	var _data_list: Array[CardConfData]
	var _data_map: Dictionary
	
	func _init(_json_) -> void:
		for _json2_ in _json_:
			var _v: CardConfData
			_v = CardConfData.new(_json2_)
			self._data_list.append(_v)
			self._data_map[_v.id] = _v

	func get_data_list() -> Array[CardConfData]:
		return self._data_list

	func get_data_map() -> Dictionary:
		return self._data_map

	func get_item(key) -> CardConfData:
		return self._data_map.get(key)


class EffectConf:
	var _data_list: Array[EffectConfData]
	var _data_map: Dictionary
	
	func _init(_json_) -> void:
		for _json2_ in _json_:
			var _v: EffectConfData
			_v = EffectConfData.new(_json2_)
			self._data_list.append(_v)
			self._data_map[_v.name] = _v

	func get_data_list() -> Array[EffectConfData]:
		return self._data_list

	func get_data_map() -> Dictionary:
		return self._data_map

	func get_item(key) -> EffectConfData:
		return self._data_map.get(key)


class BuffConf:
	var _data_list: Array[BuffConfData]
	var _data_map: Dictionary
	
	func _init(_json_) -> void:
		for _json2_ in _json_:
			var _v: BuffConfData
			_v = BuffConfData.new(_json2_)
			self._data_list.append(_v)
			self._data_map[_v.name] = _v

	func get_data_list() -> Array[BuffConfData]:
		return self._data_list

	func get_data_map() -> Dictionary:
		return self._data_map

	func get_item(key) -> BuffConfData:
		return self._data_map.get(key)


class EntityConf:
	var _data_list: Array[EntityConfData]
	var _data_map: Dictionary
	
	func _init(_json_) -> void:
		for _json2_ in _json_:
			var _v: EntityConfData
			_v = EntityConfData.new(_json2_)
			self._data_list.append(_v)
			self._data_map[_v.name] = _v

	func get_data_list() -> Array[EntityConfData]:
		return self._data_list

	func get_data_map() -> Dictionary:
		return self._data_map

	func get_item(key) -> EntityConfData:
		return self._data_map.get(key)


class CollectionConf:
	var _data_list: Array[CollectionConfData]
	var _data_map: Dictionary
	
	func _init(_json_) -> void:
		for _json2_ in _json_:
			var _v: CollectionConfData
			_v = CollectionConfData.new(_json2_)
			self._data_list.append(_v)
			self._data_map[_v.name] = _v

	func get_data_list() -> Array[CollectionConfData]:
		return self._data_list

	func get_data_map() -> Dictionary:
		return self._data_map

	func get_item(key) -> CollectionConfData:
		return self._data_map.get(key)


class ResConf:
	var _data_list: Array[ResConfData]
	var _data_map: Dictionary
	
	func _init(_json_) -> void:
		for _json2_ in _json_:
			var _v: ResConfData
			_v = ResConfData.new(_json2_)
			self._data_list.append(_v)
			self._data_map[_v.name] = _v

	func get_data_list() -> Array[ResConfData]:
		return self._data_list

	func get_data_map() -> Dictionary:
		return self._data_map

	func get_item(key) -> ResConfData:
		return self._data_map.get(key)


class CfgTables:
	var card_conf: CardConf
	var effect_conf: EffectConf
	var buff_conf: BuffConf
	var entity_conf: EntityConf
	var collection_conf: CollectionConf
	var res_conf: ResConf
	
	func _init(loader: Callable) -> void:
		self.card_conf = CardConf.new(loader.call('card_conf'))
		self.effect_conf = EffectConf.new(loader.call('effect_conf'))
		self.buff_conf = BuffConf.new(loader.call('buff_conf'))
		self.entity_conf = EntityConf.new(loader.call('entity_conf'))
		self.collection_conf = CollectionConf.new(loader.call('collection_conf'))
		self.res_conf = ResConf.new(loader.call('res_conf'))
